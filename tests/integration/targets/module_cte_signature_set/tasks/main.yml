---
# (c) 2023 Thales Group. All rights reserved.
# Author: Anurag Jain, Developer Advocate, Thales
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#  http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.


####################################################################
# WARNING: These are designed specifically for Ansible tests       #
# and should not be used as examples of how to write Ansible roles #
####################################################################

## Verify that integration_config was specified
- block:
  - assert:
      that:
        - this_node_connection_string is defined

## Validate the CTE Signature Set module
- block:
  - name: "Create CTE SignatureSet"
    thalesgroup.ciphertrust.cte_signature_set:
      op_type: create
      name: "{{ signature_set_name }}"
      description: "Created via Ansible"
      source_list: "{{ initial_source_list }}"
      localNode: "{{ this_node_connection_string }}"
    register: _result_create

  - assert:
      that:
        - _result_create is not failed
        - _result_create.response.id is string

  - name: "Patch CTE SignatureSet"
    thalesgroup.ciphertrust.cte_signature_set:
      op_type: patch
      id: "{{ _result_create.response.id }}"
      source_list: "{{ updated_source_list }}"
      localNode: "{{ this_node_connection_string }}"
    register: _result_patch

  - assert:
      that:
        - _result_patch is not failed
        - _result_patch.response.message is match("Resource updated successfully")

  - name: "Add Signatures to SignatureSet"
    thalesgroup.ciphertrust.cte_signature_set:
      op_type: add_signature
      id: "{{ _result_create.response.id }}"
      signatures: "{{ add_signature_to_set }}"
      localNode: "{{ this_node_connection_string }}"
    register: _result_add_signature

  - assert:
      that:
        - _result_add_signature is not failed
        - _result_add_signature.response.message is match("Resource updated successfully")

  - name: "Get Signature ID from SignatureSet and File Name filter"
    thalesgroup.ciphertrust.cte_signature_set:
      op_type: get_signature
      id: "{{ _result_create.response.id }}"
      file_name: "{{ signature_file_name_get_id }}"
    register: _result_get_signature

  - assert:
      that:
        - _result_get_signature is not failed
        - _result_get_signature.response.id is string

  - name: "Remove Signature from SignatureSet"
    thalesgroup.ciphertrust.cte_signature_set:
      op_type: delete_signature
      id: "{{ _result_create.response.id }}"
      signature_id: _result_get_signature.response.id
      localNode: "{{ this_node_connection_string }}"
    register: _result_del_signature

  - assert:
      that:
        - _result_del_signature is not failed
        - _result_del_signature.response is match("Resource deleted successfully")
  
  - name: "Delete Signature Set"
    thalesgroup.ciphertrust.cm_resource_delete:
      key: "{{ _result_create.response.id }}"
      resource_type: "signatureset"
      localNode: "{{ this_node_connection_string }}"
    register: _result_delete_signature_set
    
  - assert:
      that:
        - _result_delete_signature_set is not failed