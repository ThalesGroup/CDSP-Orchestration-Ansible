---
# (c) 2023 Thales Group. All rights reserved.
# Author: Anurag Jain, Developer Advocate, Thales


####################################################################
# WARNING: These are designed specifically for Ansible tests       #
# and should not be used as examples of how to write Ansible roles #
####################################################################

## Verify that integration_config was specified
- block:
  - assert:
      that:
        - this_node_connection_string is defined

## Validate the CTE Policy management module
- name: "Get User ID from Name"
  thalesgroup.ciphertrust.cm_resource_get_id_from_name:
    localNode: "{{ this_node_connection_string }}"
    query_param: username
    query_param_value: "{{ username }}"
    resource_type: users
  register: user

- name: "Create Key"
  thalesgroup.ciphertrust.vault_keys2_save:
    op_type: create
    name: "{{ keyName }}"
    algorithm: "{{ keyAlgo }}"
    size: "{{ keySize }}"
    undeletable: false
    unexportable: false
    usageMask: 76
    meta:
      ownerId: "{{ user['response']['id'] }}"
      permissions:
        DecryptWithKey:
          - "CTE Clients"
        EncryptWithKey:
          - "CTE Clients"
        ExportKey:
          - "CTE Clients"
        MACVerifyWithKey:
          - "CTE Clients"
        MACWithKey:
          - "CTE Clients"
        ReadKey:
          - "CTE Clients"
        SignVerifyWithKey:
          - "CTE Clients"
        SignWithKey:
          - "CTE Clients"
        UseKey:
          - "CTE Clients"
      cte:
        persistent_on_client: true
        encryption_mode: CBC
        cte_versioned: false
    xts: false
    localNode: "{{ this_node_connection_string }}"
  register: key

- block:
  - name: "Create CTE ResourceSet"
    thalesgroup.ciphertrust.cte_resource_set:
      op_type: create
      name: "{{ resource_set_1 }}"
      type: Directory
      description: "Created via Ansible"
      resources:
        - directory: "{{ resource_set_1_dir_path }}"
          file: "*"
          include_subfolders: true
          hdfs: false
      localNode: "{{ this_node_connection_string }}"
    register: _result_create_rs_1

  - assert:
      that:
        - _result_create_rs is not failed
        - _result_create_rs.response.id is string

- block:
  - name: "Create CTE Policy"
    thalesgroup.ciphertrust.cte_policy_save:
      op_type: create
      localNode: "{{ this_node_connection_string }}"
      name: "{{ cte_policy_name }}"
      description: "Created via Ansible"
      never_deny: false
      metadata:
        restrict_update: false
      security_rules:
        - action: key_op
          effect: "permit,applykey"
          partial_match: true
        - resource_set_id: "{{ _result_create_rs['response']['id'] }}"
          exclude_resource_set: false
          partial_match: true
          action: all_ops
          effect: "permit,audit,applykey"
      policy_type: Standard
      key_rules:
        - key_id: "{{ key['response']['id'] }}"
          resource_set_id: "{{ _result_create_rs['response']['id'] }}"
      data_transform_rules:
        - key_id: "{{ key['response']['id'] }}"
          resource_set_id: "{{ _result_create_rs['response']['id'] }}"
    register: _result_create

  - assert:
      that:
        - _result_create is not failed
        - _result_create.response.id is string

  - name: "Patch CTE Policy"
    thalesgroup.ciphertrust.cte_policy_save:
      op_type: patch
      policy_id: "{{ _result_create.response.id }}"
      description: "Updated by Ansible"
      localNode: "{{ this_node_connection_string }}"
    register: _result_patch

  - assert:
      that:
        - _result_patch is not failed
        - _result_patch.response.message is match("Resource updated successfully")

- block:
  - name: "Create another CTE ResourceSet for updating CTE policy"
    thalesgroup.ciphertrust.cte_resource_set:
      op_type: create
      name: "{{ resource_set_2 }}"
      type: Directory
      description: "Created via Ansible"
      resources:
        - directory: "{{ resource_set_2_dir_path }}"
          file: "*"
          include_subfolders: true
          hdfs: false
      localNode: "{{ this_node_connection_string }}"
    register: _result_create_rs_2

  - assert:
      that:
        - _result_create_rs_2 is not failed
        - _result_create_rs_2.response.id is string

  - block:
    - name: "Create yet another CTE ResourceSet for other op_types"
      thalesgroup.ciphertrust.cte_resource_set:
        op_type: create
        name: "{{ resource_set_3 }}"
        type: Directory
        description: "Created via Ansible"
        resources:
          - directory: "{{ resource_set_3_dir_path }}"
            file: "*"
            include_subfolders: true
            hdfs: false
        localNode: "{{ this_node_connection_string }}"
      register: _result_create_rs_3

  - assert:
      that:
        - _result_create_rs_3 is not failed
        - _result_create_rs_3.response.id is string

  - name: "Add data transformation rule to CTE Policy"
    thalesgroup.ciphertrust.cte_policy_save:
      op_type: add_data_transfer_rule
      policy_id: "{{ _result_create.response.id }}"
      key_id: "{{ key['response']['id'] }}"
      resource_set_id: "{{ _result_create_rs_2['response']['id'] }}"
    register: _result_patch_add_dtx_rule

  - assert:
      that:
        - _result_patch_add_dtx_rule is not failed
        - _result_patch_add_dtx_rule.response.message is match("Resource updated successfully")

  - name: "Add key rule to CTE Policy"
    thalesgroup.ciphertrust.cte_policy_save:
      op_type: add_key_rule
      policy_id: "{{ _result_create.response.id }}"
      key_id: "{{ key['response']['id'] }}"
      resource_set_id: "{{ _result_create_rs_2['response']['id'] }}"
    register: _result_patch_add_key_rule

  - assert:
      that:
        - _result_patch_add_key_rule is not failed
        - _result_patch_add_key_rule.response.message is match("Resource updated successfully")

  - name: "Add security rule to CTE Policy"
    thalesgroup.ciphertrust.cte_policy_save:
      op_type: add_security_rule
      policy_id: "{{ _result_create.response.id }}"
      resource_set_id: "{{ _result_create_rs_2['response']['id'] }}"
      exclude_resource_set: false
      partial_match: true
      action: all_ops
      effect: "permit,audit,applykey"
    register: _result_patch_add_sec_rule

  - assert:
      that:
        - _result_patch_add_sec_rule is not failed
        - _result_patch_add_sec_rule.response.message is match("Resource updated successfully")

  - name: "Patch data transformation rule to CTE Policy"
    thalesgroup.ciphertrust.cte_policy_save:
      op_type: patch_data_transfer_rule
      policy_id: "{{ _result_create.response.id }}"
      dataTxRuleId: "{{ _result_patch_add_dtx_rule['response']['id'] }}"
      key_id: "{{ key['response']['id'] }}"
      resource_set_id: "{{ _result_create_rs_3['response']['id'] }}"
    register: _result_patch_upd_dtx_rule

  - assert:
      that:
        - _result_patch_upd_dtx_rule is not failed
        - _result_patch_upd_dtx_rule.response.message is match("Resource updated successfully")

  - name: "Patch key rule to CTE Policy"
    thalesgroup.ciphertrust.cte_policy_save:
      op_type: patch_key_rule
      policy_id: "{{ _result_create.response.id }}"
      keyRuleId: "{{ _result_patch_add_key_rule['response']['id'] }}"
      key_id: "{{ key['response']['id'] }}"
      resource_set_id: "{{ _result_create_rs_3['response']['id'] }}"
    register: _result_patch_upd_key_rule

  - assert:
      that:
        - _result_patch_upd_key_rule is not failed
        - _result_patch_upd_key_rule.response.message is match("Resource updated successfully")

  - name: "Patch security rule to CTE Policy"
    thalesgroup.ciphertrust.cte_policy_save:
      op_type: patch_security_rule
      policy_id: "{{ _result_create.response.id }}"
      securityRuleId: "{{ _result_patch_add_sec_rule['response']['id'] }}"
      resource_set_id: "{{ _result_create_rs_3['response']['id'] }}"
      exclude_resource_set: false
      partial_match: true
      action: all_ops
      effect: "permit,audit,applykey"
    register: _result_patch_upd_sec_rule

  - assert:
      that:
        - _result_patch_upd_sec_rule is not failed
        - _result_patch_upd_sec_rule.response.message is match("Resource updated successfully")

  - name: "Remove data transformation rule from CTE Policy"
    thalesgroup.ciphertrust.cte_policy_save:
      op_type: remove_data_transfer_rule
      policy_id: "{{ _result_create.response.id }}"
      dataTxRuleId: "{{ _result_patch_add_dtx_rule['response']['id'] }}"
    register: _result_patch_del_dtx_rule

  - assert:
      that:
        - _result_patch_del_dtx_rule is not failed
        - _result_patch_del_dtx_rule.response.message is match("Resource deleted successfully")

  - name: "Remove key rule from CTE Policy"
    thalesgroup.ciphertrust.cte_policy_save:
      op_type: remove_key_rule
      policy_id: "{{ _result_create.response.id }}"
      keyRuleId: "{{ _result_patch_add_key_rule['response']['id'] }}"
    register: _result_patch_del_key_rule

  - assert:
      that:
        - _result_patch_del_key_rule is not failed
        - _result_patch_del_key_rule.response.message is match("Resource deleted successfully")

  - name: "Remove security rule from CTE Policy"
    thalesgroup.ciphertrust.cte_policy_save:
      op_type: remove_security_rule
      policy_id: "{{ _result_create.response.id }}"
      securityRuleId: "{{ _result_patch_add_sec_rule['response']['id'] }}"
    register: _result_patch_del_sec_rule

  - assert:
      that:
        - _result_patch_del_sec_rule is not failed
        - _result_patch_del_sec_rule.response.message is match("Resource deleted successfully")